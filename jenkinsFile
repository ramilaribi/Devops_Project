def startContainerIfExists(containerName) {
    def containerExists = sh(script: "docker ps -a -q -f name=${containerName}", returnStatus: true) == 0
    if (containerExists) {
        echo "${containerName} container exists. Starting it..."
        def startStatus = sh(script: "docker start ${containerName}", returnStatus: true)
        return startStatus == 0 // Return true if starting was successful
    } else {
        echo "${containerName} container does not exist. It will be created with Docker Compose."
        return false // Return false indicating the container needs to be created
    }
}

pipeline {
    agent any
    stages {
        stage("Testing Maven") {
            steps {
                sh "mvn -version"
            }
        }
        stage("Testing JDK") {
            steps {
                sh "java -version"
            }
        }
        stage("Checkout Git") {
            steps {
                echo "Pulling"
            }
        }
        stage('MVN COMPILE') {
            steps {
                sh 'mvn compile'
            }
        }
        stage('Run Tests') {
            steps {
                sh 'mvn clean test -X'
            }
        }
        stage('Generate JaCoCo Coverage Report') {
            steps {
                sh 'mvn jacoco:report'
            }
        }
        stage('Check and Start Nexus and SonarQube') {
            steps {
                script {
                    def nexusContainer = "nexus_auto"
                    def sonarqubeContainer = "sonarqube_auto"
                    def sonarqubeDbContainer = "sonarqube-db-auto"
                    def containersNeedCreating = false

                    // Check Nexus container
                    if (!startContainerIfExists(nexusContainer)) {
                        containersNeedCreating = true
                    }

                    // Check SonarQube container
                    if (!startContainerIfExists(sonarqubeContainer)) {
                        containersNeedCreating = true
                    }

                    // Check SonarQube DB container
                    if (!startContainerIfExists(sonarqubeDbContainer)) {
                        containersNeedCreating = true
                    }

                    // If any container is missing, create and start all using Docker Compose
                    if (containersNeedCreating) {
                        echo "Creating and starting containers using Docker Compose..."
                        sh 'docker-compose -f docker-compose-nexus-sonarqube.yml up -d --build'
                        echo "Containers created and started."
                    } else {
                        echo "All containers are already running."
                    }
                    echo "Waiting for services to be ready..."
                    sleep(180)
                }
            }
        }

        stage('MVN SONARQUBE') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'sonar-credentials', passwordVariable: 'SONAR_PASSWORD', usernameVariable: 'SONAR_USERNAME')]) {
                    sh '''
                    mvn sonar:sonar \
                    -Dsonar.host.url=http://192.168.33.10:9000 \
                    -Dsonar.login=$SONAR_USERNAME \
                    -Dsonar.password=$SONAR_PASSWORD
                    '''
                }
            }
        }
        stage('Deploy') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'nexus-credentials', passwordVariable: 'NEXUS_PASSWORD', usernameVariable: 'NEXUS_USERNAME')]) {
                    sh """
                        echo "<settings>
                            <servers>
                                <server>
                                    <id>deploymentRepo</id>
                                    <username>${NEXUS_USERNAME}</username>
                                    <password>${NEXUS_PASSWORD}</password>
                                </server>
                            </servers>
                        </settings>" > ~/.m2/settings.xml

                        mvn deploy -DskipTests \
                        -DaltDeploymentRepository=deploymentRepo::default::http://192.168.33.10:8081/repository/maven-releases/
                    """
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    def customImageName = "imagerami"
                    def version = sh(script: "mvn help:evaluate -Dexpression=project.version -q -DforceStdout", returnStdout: true).trim()
                    sh "docker build --build-arg VERSION=${version} -t $customImageName ."
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-credentials', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"
                        sh 'docker tag imagerami ramilaribi/imagerami'
                        sh 'docker push ramilaribi/imagerami'
                    }
                }
            }
        }
        stage('Verify Docker Compose Installation') {
            steps {
                sh 'docker compose version'
            }
        }

        // Docker Compose setup for running on VM (commented out)
        // stage('Docker Compose') {
        //     steps {
        //         sh 'docker compose down'
        //         sh 'docker compose up -d --build'
        //     }
        // }
        // stage('Check Docker Compose') {
        //     steps {
        //         script {
        //             sh 'docker compose ps'
        //         }
        //     }
        // }

        stage('Deploy to EC2') {
            steps {
                script {
                    echo "Starting deployment to EC2 instance..."
                    sshagent(['aws-ec2-ssh-credentials']) {
                        sh '''
                        echo "Connecting to EC2 instance via SSH... üîß"
                        ssh -tt -o StrictHostKeyChecking=no ubuntu@52.15.237.87 << 'EOF'
                        echo "Pulling latest changes from Git repository...„ÄΩÔ∏è"
                        git -C /home/ubuntu/Devops_Project pull origin main || git clone https://github.com/ramilaribi/Devops_Project.git /home/ubuntu/Devops_Project
                        echo "Navigating to the project directory..."
                        cd /home/ubuntu/Devops_Project
                        echo "Stopping and redeploying containers with Docker Compose... üîò"
                        docker-compose down
                        docker-compose up -d --build
                        echo "Deployment completed on EC2 instance.‚úÖ"
                        exit
                        EOF
                        '''
                    }
                    echo "Deployment to EC2 instance finished."
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            sh 'docker stop nexus_auto || true'
            sh 'docker stop sonarqube_auto || true'
            sh 'docker stop sonarqube-db-auto || true'
        }
        success {
            mail to: 'laribi.rami@esprit.tn',
                subject: "‚úÖ Build Successful",
                mimeType: 'text/html', // Ensures HTML rendering
                body: """
                    <h2 style="color: green;">üéâ Build Successful üéâ</h2>
                    <p>Hello,</p>
                    <p>The build for your job has completed successfully!</p>
                    <p>‚ú® <a href="http://192.168.33.10:8080/job/testMail/13/">View Console Output</a></p>
                    <p>Thank you for your attention!</p>
                    <p>Best regards,<br> Jenkins CI/CD ü§ñ</p>
                """
        }
        failure {
            mail to: 'laribi.rami@esprit.tn',
                subject: "‚ùå Build Failed",
                mimeType: 'text/html', // Ensures HTML rendering
                body: """
                    <h2 style="color: red;">üö® Build Failed üö®</h2>
                    <p>Hello,</p>
                    <p>The build for your job has unfortunately failed.</p>
                    <p>üîç <a href="http://192.168.33.10:8080/job/testMail/13/">View Console Output</a></p>
                    <p>Thank you for your attention!</p>
                    <p>Best regards,<br> Jenkins CI/CD ü§ñ</p>
                """
        }
    }
}
